angular.module('app.filters', []);
angular.module('app.views', []);
angular.module('app.constants', []);
angular.module('app.directives', ['infinite-scroll', 'app.filters']);
angular.module('app.services', ['app.constants', 'ngResource']);

var app = angular.module('app', ['app.services', 'app.directives', 'app.views', 'app.filters', 'ngRoute']);

app.config(["$routeProvider", function($routeProvider) {
    $routeProvider.when('/', { templateUrl : 'profile-details.html' });
}]);

/* globals angular:false */

var constants;
constants = angular.module('app.constants');

constants.constant('FLICKR_API', 'https://api.flickr.com/services/rest/');

constants.constant('FLICKR_KEY', '2ff958264d0f285beac52b51a3fd2247');

/* globals angular:false */

var constants;
constants = angular.module('app.constants');

constants.constant('TWITTER_API', 'http://localhost:3000');

constants.constant('TWITTER_QUANTITY_TWEETS_GET', 10);

var app = angular.module('app.directives');

app.controller('profileDetailsController', ["$q", "helpService", "twitter", function profileDetailsController($q, helpService, twitter) {

    $q.all([twitter.getTweets(), twitter.getUser()]).then(helpService.spread(function (tweets, user) {
        this.tweets = tweets;
        this.user = user;
    }.bind(this)));

    this.moreTweets = function moreTweets() {
        twitter.moreTweets(this.tweets);
    };

}]);
var filters = angular.module('app.filters');

filters.filter('hashtag', function() {
    return function (hash) {
        return hash ? '#' + hash : '';
    };
});
var filters = angular.module('app.filters');

filters.filter('removeText', function() {
    return function (text, remove) {
        return text ? text.replace(remove, '') : '';
    };
});
var filters = angular.module('app.filters');

filters.filter('screenName', function() {
    return function (userScreenName) {
        return userScreenName ? '@' + userScreenName : '';
    };
});
/* globals angular:false */

var services;
services = angular.module('app.services');

services.factory('FlickrService', ["$resource", "FLICKR_API", "FLICKR_KEY", function FlickrService($resource, FLICKR_API, FLICKR_KEY) {
    return $resource(FLICKR_API, {}, {
        photos: {
            method: 'GET',
            url: FLICKR_API,
            isArray: false,
            params: {
                method: 'flickr.photos.search',
                api_key: FLICKR_KEY,
                page: 1,
                format: 'json',
                nojsoncallback: 1,
                per_page: 1
            }
        }
    });
}]);

services.factory('flickr', ["FlickrService", function flickr(FlickrService) {
    return {
        getPhotos: function getPhotos(tags) {
            return FlickrService.photos({ tags: tags }).$promise;
        },
        getPhotoUrl: function getPhotoUrl(photo) {
            return 'https://farm' + photo.farm + '.staticflickr.com/' + photo.server + '/' + photo.id + '_' + photo.secret + '.jpg';
        }
    }
}]);
var services;
services = angular.module('app.services');

services.factory('helpService', function helpService() {

    return {
        first: function first(collection) {
            return collection[0];
        },
        last: function last(collection) {
            return collection[collection.length - 1];
        },
        random: function ramdom(limMax) {
            return Math.floor((Math.random() * limMax) + 1);
        },
        spread: function spread(func) {
            return function(array) {
                return func.apply(this, array);
            };
        }
    }

});
/* globals angular:false */

var services;
services = angular.module('app.services');

services.factory('TwitterService', ["$resource", "TWITTER_API", function TwitterService($resource, TWITTER_API) {
    return $resource(TWITTER_API, {}, {
        tweets: {
            method: 'GET',
            url: TWITTER_API + '/tweets',
            isArray: true
        },
        user: {
            method: 'GET',
            url: TWITTER_API + '/user',
            isArray: false
        }
    });
}]);

services.factory('twitter', ["helpService", "TwitterService", "TWITTER_QUANTITY_TWEETS_GET", function twitter(helpService, TwitterService, TWITTER_QUANTITY_TWEETS_GET) {
    
    return {
        _readingTweets: false,
        moreTweets: function moreTweets(arrayTweets) {
            if (this._readingTweets) return;
            var max_id = (helpService.last(arrayTweets)).id;
            this._readingTweets = true;
            this.getTweets(TWITTER_QUANTITY_TWEETS_GET + 1, max_id).then(function(response) {
                response.shift();
                for (var index = 0; index < response.length; index++) arrayTweets.push(response[index]);
                this._readingTweets = false;
            }.bind(this)).catch(function() {
                this._readingTweets = false;
            }.bind(this));
        },
        getTweets: function(count, maxId) {
            if (!count) count = TWITTER_QUANTITY_TWEETS_GET;
            return TwitterService.tweets({ count: count, max_id: maxId }).$promise;
        },
        getUser: function getUser() {
            return TwitterService.user().$promise;
        }
    }

}]);

var app = angular.module('app.directives');

app.directive('followersKnow', function followersKnow() {

    return {
        restrict : 'E',
        template : [
            '<div class="col-md-3 profile-photos">',
            '   <img class="profile-photos-img" src="images/followers-know.png" />',
            '</div>'
        ].join('')
    };

});
var app = angular.module('app.directives');

app.directive('profileFollowersKnow', function profileFollowersKnow() {

    return {
        restrict : 'E',
        scope: {},
        template : [
            '<section class="profile-photos-container">',
            '   <header class="profile-photos-header">',
            '       <span><i class="fa fa-user" aria-hidden="true"></i> {{ ctrl.followers.length }} Followers you know</span>',
            '   </header>',
            '   <section>',
            '       <followers-know ng-repeat="follow in ctrl.followers track by $index"></followers-know>',
            '   </section>',
            '</section>'
        ].join(''),
        controllerAs: 'ctrl',
        controller: ["helpService", function profileFollowersKnowController(helpService) {

            this.followers = new Array(helpService.random(16));

        }]
    };

});
var app = angular.module('app.directives');

app.directive('navbarIcon', function navbarIcon() {

    return {
        restrict : 'E',
        template : [
            '<i class="fa fa-2x fa-twitter navbar-icon" aria-hidden="true"></i>'
        ].join('')
    };

});
var app = angular.module('app.directives');

app.directive('navbarOption', function navbarOption() {

    return {
        restrict : 'E',
        replace: true,
        scope: {},
        template : [
            '<li>',
            '   <a href="#">',
            '       <span class="glyphicon glyphicon-home" aria-hidden="true"></span>',
            '       {{ title }}',
            '   </a>',
            '</li>'
        ].join(''),
        link: function link(scope, element, attrs) {
            scope.title = attrs.title;
        }
    };

});
var app = angular.module('app.directives');

app.directive('navbarSearch', function navbarSearch() {

    return {
        restrict : 'E',
        template : [
            '<form>',
            '   <input type="text" class="form-control mod-search" placeholder="Search Twitter" />',
            '</form>'
        ].join('')
    };

});
var app = angular.module('app.directives');

app.directive('photosVideos', function photosVideos() {

    return {
        restrict : 'E',
        template : [
            '<div class="col-md-4 profile-photos">',
            '   <img class="profile-photos-img" src="images/photo-and-videos.jpg" />',
            '</div>'
        ].join('')
    };

});
var app = angular.module('app.directives');

app.directive('profilePhotosVideos', function profilePhotosVideos() {

    return {
        restrict : 'E',
        scope: {},
        template : [
            '<section class="profile-photos-container">',
            '   <header class="profile-photos-header">',
            '       <span><i class="fa fa-camera" aria-hidden="true"></i> {{ ctrl.photos.length }} photos and videos</span>',
            '   </header>',
            '   <section>',
            '       <photos-videos ng-repeat="photo in ctrl.photos track by $index"></photos-videos>',
            '   </section>',
            '</section>'
        ].join(''),
        controllerAs: 'ctrl',
        controller: ["helpService", function profilePhotosVideosController(helpService) {

            this.photos = new Array(helpService.random(9));

        }]
    };

});
var app = angular.module('app.directives');

app.directive('profileCount', function profileCount() {

    return {
        restrict : 'E',
        scope: {
            count: '='
        },
        template : [
            '   <article class="profile-count">',
            '       <div class="row">',
            '           <span class="profile-count-title">{{ title }}</span>',
            '       </div>',
            '       <div class="row">',
            '           <span class="profile-count-data">{{ count }}</span>',
            '       </div>',
            '   </article>'
        ].join(''),
        link: function link(scope, element, attrs) {
            scope.title = attrs.title;
            if (attrs.active) element.find('article').addClass('mod-active');
        }
    };

});
var app = angular.module('app.directives');

app.directive('profileImg', ["$filter", function profileImg($filter) {

    return {
        restrict : 'E',
        scope: {
            link: '='
        },
        template : [
            '<img ng-src="{{ link }}" />'
        ].join(''),
        link: function link(scope, element, attrs) {

            element.find('img').addClass(attrs.classImg);

            var stopWatch = scope.$watch(function () {
                return scope.link;
            }, function () {
                if (!scope.link) return;
                if (attrs.removeText) scope.link = $filter('removeText')(scope.link, attrs.removeText);
                stopWatch();
            });

        }
    };

}]);
var app = angular.module('app.directives');

app.directive('profileTrends', function profileTrends() {

    return {
        restrict : 'E',
        template : [
            '<section class="profile-trends-container col-md-12">',
            '   <header class="profile-trends-container-header">',
            '       Trends',
            '   </header>',
            '   <section>',
            '       <trend hash="AngularJS" count="2,147"></trend>',
            '       <trend hash="React" count="4,303"></trend>',
            '       <trend hash="FelippeNaB2W" count="1,906"></trend>',
            '       <trend hash="B2WDigital" count="7,987"></trend>',
            '       <trend hash="FrontEndCarioca" count="208"></trend>',
            '       <trend hash="FrontInRio" count="243"></trend>',
            '       <trend hash="SubmarinoCom" count="86,456"></trend>',
            '       <trend hash="BlackFriday" count="347"></trend>',
            '       <trend hash="B2WInterview" count="9,651"></trend>',
            '       <trend hash="JavaScriptS2" count="234"></trend>',
            '   </section>',
            '</section>'
        ].join('')
    };

});
var app = angular.module('app.directives');

app.directive('trend', function trend() {

    return {
        restrict : 'E',
        scope: {},
        template : [
            '<div class="col-md-12 profile-trend">',
            '   <div class="row">',
            '       <span class="profile-trend-hashtag">{{ hash | hashtag }}</span>',
            '   </div>',
            '   <div class="row">',
            '       <span class="profile-trend-count">{{ count }} Tweets</span>',
            '   </div>',
            '</div>'
        ].join(''),
        link: function link(scope, element, attrs) {
            scope.hash = attrs.hash;
            scope.count = attrs.count;
        }
    };

});
var app = angular.module('app.directives');

app.directive('profileTweets', function profileTweets() {

    return {
        restrict : 'E',
        scope: {
            tweets: '='
        },
        template : [
            '<section class="col-md-12 col-sm-12 col-xs-12 profile-tweets-container">',
            '   <header class="profile-tweets-header">',
            '       <tweets-header-option text="Tweets"></tweets-header-option>',
            '       <tweets-header-option text="Tweets & replies" active="true"></tweets-header-option>',
            '       <tweets-header-option text="Media"></tweets-header-option>',
            '   </header>',
            '   <section>',
            '       <tweet ng-repeat="tweet in tweets track by $index" tweet="tweet"></tweet>',
            '   </section>',
            '   <div infinite-scroll="moreTweets()" infinite-scroll-distance="0"></div>',
            '</section>'
        ].join(''),
        link: function link(scope) {

            scope.moreTweets = function moreTweets() {
                if (!scope.tweets) return;
                scope.$parent.ctrl.moreTweets();
            };

        }
    };

});
var app = angular.module('app.directives');

app.directive('tweetsHeaderOption', function tweetsHeaderOption() {

    return {
        restrict : 'E',
        scope: {},
        template : [
            '<section class="profile-tweets-option">',
            '   <span>{{ text }}</span>',
            '</section>'
        ].join(''),
        link: function link(scope, element, attrs) {
            scope.text = attrs.text;
            if (attrs.active) element.find('section').addClass('mod-active');
        }
    };

});
var app = angular.module('app.directives');

app.directive('profileInfoIcon', function profileInfoIcon() {

    return {
        restrict : 'E',
        scope: {
            text: '='
        },
        template : [
            '<div class="row profile-info-name profile-info-data">',
            '   <i class="fa" ng-class="icon" aria-hidden="true"></i>',
            '   <span>{{ text }}</span>',
            '</div>'
        ].join(''),
        link: function link(scope, element, attrs) {
            scope.icon = attrs.icon;
            if (attrs.isLink) element.find('span').addClass('profile-info-description-url');
        }
    };

});

var app = angular.module('app.directives');

app.directive('profileInfo', function profileInfo() {

    return {
        restrict : 'E',
        priority: 1,
        scope: {
            user: '='
        },
        template : [
            '<section class="profile-info-container">',
            '   <article>',
            '       <div class="row profile-info-name">',
            '           <span class="profile-info-name-title">{{ user.name }}</span>',
            '       </div>',
            '       <div class="row profile-info-name">',
            '           <span class="profile-info-name-at">{{ user.screen_name | screenName }}</span>',
            '       </div>',
            '   </article>',
            '   <article class="profile-info-description-container">',
            '       <div class="row profile-info-name">',
            '           <span>{{ user.description }}</span>',
            '       </div>',
            '   </article>',
            '   <article class="profile-info-description-container">',
            '       <profile-info-icon icon="fa-map-marker" text="user.location"></profile-info-icon>',
            '       <profile-info-icon icon="fa-link" text="user.name" is-link="true"></profile-info-icon>',
            '       <profile-info-icon icon="fa-calendar" text="user.created_at"></profile-info-icon>',
            '   </article>',
            '   <article class="profile-info-description-container">',
            '       <button class="btn btn-tweet btn-full">',
            '           <i class="fa fa-pencil-square-o" aria-hidden="true"></i>',
            '           <span>Tweet to {{ user.name }}</span>',
            '       </button>',
            '   </article>',
            '</section>'
        ].join('')
    };

});
var app = angular.module('app.directives');

app.directive('tweetIcon', function tweetIcon() {

    return {
        restrict : 'E',
        scope: {
            value: '='
        },
        template : [
            '<i class="fa" ng-class="icon" aria-hidden="true">',
            '   <span class="tweet-main-icons-value" ng-if="value">{{ value }}</span>',
            '</i>'
        ].join(''),
        link: function link(scope, element, attrs) {
            scope.icon = attrs.icon;
        }
    };

});
var app = angular.module('app.directives');

app.directive('tweetImage', ["flickr", "helpService", function tweetImage(flickr, helpService) {

    return {
        restrict : 'E',
        scope: {
            tweet: '='
        },
        template : [
            '<div class="row" ng-if="url">',
            '   <img class="profile-tweet-image" ng-src="{{ url }}" />',
            '</div>'
        ].join(''),
        link: function link(scope) {

            if (scope.tweet.entities.hashtags.length) {
                var tag = helpService.first(scope.tweet.entities.hashtags).text;
                flickr.getPhotos(tag).then(function (response) {
                    scope.url = flickr.getPhotoUrl(helpService.first(response.photos.photo));
                });
            } else if (scope.tweet.entities.media && scope.tweet.entities.media.length) {
                scope.url = helpService.first(scope.tweet.entities.media).media_url;
            }

        }
    };

}]);
var app = angular.module('app.directives');

app.directive('tweet', function tweet() {

    return {
        restrict : 'E',
        scope: {
            tweet: '='
        },
        template : [
            '<article class="tweet-container col-md-12 col-sm-12 col-xs-12">',
            '   <aside class="col-md-2 col-sm-2 tweet-img-container hidden-xs">',
            '       <img class="tweet-img" ng-src="{{ tweet.user.profile_image_url }}" />',
            '   </aside>',
            '   <main class="col-md-10 col-sm-10 col-xs-10 tweet-main-container">',
            '       <div class="row tweet-main-reply" ng-if="tweet.entities.user_mentions.length">',
            '           <span><i class="fa fa-reply hidden-xs icon-reply" aria-hidden="true"></i>In reply to {{ tweet.entities.user_mentions[0].name }}</span>',
            '       </div>',
            '       <div class="row tweet-main-profile-container">',
            '           <span class="tweet-main-profile-name">{{ tweet.user.name }}</span>',
            '           <span class="tweet-main-profile-at">{{ tweet.user.screen_name | screenName }}</span>',
            '       </div>',
            '       <div class="row tweet-main">',
            '           <span>{{ tweet.text }}</span>',
            '       </div>',
            '       <tweet-image tweet="tweet"></tweet-image>',
            '       <div class="row tweet-main-icons">',
            '           <tweet-icon icon="fa-reply" value="tweet.entities.user_mentions.length"></tweet-icon>',
            '           <tweet-icon icon="fa-retweet" value="tweet.retweet_count"></tweet-icon>',
            '           <tweet-icon icon="fa-heart" value="tweet.favorite_count"></tweet-icon>',
            '           <tweet-icon icon="fa-ellipsis-h"></tweet-icon>',
            '       </div>',
            '   </main>',
            '</article>'
        ].join('')
    };

});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
